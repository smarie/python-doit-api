{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"doit-api \u00b6 pydoit for humans: an API to create doit tasks faster and more reliably. pydoit is a great automation tool, but it is a bit hard to develop fast with it unless knowing by heart all the naming conventions. Indeed it follows a \"no api\" philosophy, so you have to remember all names and supported types, going back and forth reading the documentation page. Inspired by letsdoit , doit-api proposes a few api symbols to help you develop faster and more reliably, thanks to IDE autocompletion, docstring display, and type hinting. Installing \u00b6 > pip install doit-api Usage \u00b6 Single task \u00b6 TODO Task generator \u00b6 TODO Main features / benefits \u00b6 Develop doit tasks faster and more reliably thanks to you favourite python IDE's autocompletion and documentation features. See Also \u00b6 doit of course fprules a library to help create make -like file pattern rules, quite handy for doit tasks. letsdoit the project that inspired doit-api other doit plugins: doit-report doit-redis doit-graph doit-py doit-cmd celery , another generic asynchronous task engine nox , another task engine oriented towards build/test Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-doit-api","title":"Home"},{"location":"#doit-api","text":"pydoit for humans: an API to create doit tasks faster and more reliably. pydoit is a great automation tool, but it is a bit hard to develop fast with it unless knowing by heart all the naming conventions. Indeed it follows a \"no api\" philosophy, so you have to remember all names and supported types, going back and forth reading the documentation page. Inspired by letsdoit , doit-api proposes a few api symbols to help you develop faster and more reliably, thanks to IDE autocompletion, docstring display, and type hinting.","title":"doit-api"},{"location":"#installing","text":"> pip install doit-api","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#single-task","text":"TODO","title":"Single task"},{"location":"#task-generator","text":"TODO","title":"Task generator"},{"location":"#main-features-benefits","text":"Develop doit tasks faster and more reliably thanks to you favourite python IDE's autocompletion and documentation features.","title":"Main features / benefits"},{"location":"#see-also","text":"doit of course fprules a library to help create make -like file pattern rules, quite handy for doit tasks. letsdoit the project that inspired doit-api other doit plugins: doit-report doit-redis doit-graph doit-py doit-cmd celery , another generic asynchronous task engine nox , another task engine oriented towards build/test","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-doit-api","title":"Want to contribute ?"},{"location":"api_reference/","text":"API reference \u00b6 In general, using help(symbol) is the recommended way to get the latest documentation. In addition, this page provides an overview of the various elements in this package. @task or task \u00b6 Creates a doit task. It may be used as a decorator with or without parameter, or as a creator: from doit_api import task @task def a (): print ( \"hi\" ) @task ( targets =... , file_deps =... , ... ) def b (): print ( \"hi\" ) c = task ( actions = [ \"echo hi\" ]) It signature regroups all options that you usually can set on a doit task, with sensible defaults. A minimal doit task consists of one or several actions. When @task is used as a decorator, the main action is a call to the decorated function. Otherwise when task is used as a creator, you must provide at least one action in actions . You can specify actions to be done before and after that/these actions in pre_actions and post_actions . If tell_why_i_am_runnin=True (default) an additional action will be prepended to print the reason why the task is running if the task declared a file_dep , task_dep , uptodate or targets . All other parameters match those in doit conventions (See parameters below), except name that is an intelligent placeholder for basename (if a task is a simple task) or name (if the task is a subtask in a @taskgen generator), title that adds support for plain strings and by default is title_with_actions , task_dep , setup and calc_dep where if a task callable (decorated with @task or not) is provided, the corresponding name will be used. Note: the watch parameter (Linux and Mac only) is not yet supported. See [doit doc](https://pydoit.org/cmd_other.html?highlight=watch#auto-watch def task ( # -- task information name = None , # type: str doc = None , # type: str # -- what the task is doing when run title = title_with_actions , # type: Union[str, Callable] pre_actions = None , # type: List[DoitAction] actions = None , # type: List[DoitAction] post_actions = None , # type: List[DoitAction] tell_why_am_i_running = True , # type: bool # -- preventing useless runs and selecting order targets = None , # type: List[DoitPath] file_dep = None , # type: List[DoitPath] task_dep = None , # type: List[DoitTask] uptodate = None , # type: List[Optional[Union[bool, Callable, str]]] # -- advanced setup = None , # type: List[DoitTask] teardown = None , # type: List[DoitAction] getargs = None , # type: Dict[str, Tuple[str, str]] calc_dep = None , # type: List[DoitTask] # -- misc verbosity = None # type: int ) Parameters: name : an alternate name for the task. By default the name of the decorated function is used. Note that this parameter will intelligently set 'basename' for normal tasks or 'name' for subtasks in a task generator ( @taskgen ). See doit doc doc : an optional documentation string for the task. If @task is used as a decorator, the decorated function docstring will be used. See doit doc title : an optional message string or callable generating a message, to print when the task is run. If nothing is provided, by default the task name is printed. If a string is provided, the task name will automatically be printed before it. If a callable is provided it should receive a single task argument and return a string. See doit doc pre_actions : an optional list of actions to be executed before the main action(s). There are 2 basic kinds of actions: cmd-action and python-action. See doit doc actions : a list of actions that this task should execute. If task is used as a decorator, this attribute should not be set, as the action will be a call to the decorated function. There are 2 basic kinds of actions: cmd-action and python-action. See doit doc post_actions : an optional list of actions to be executed after the main action(s). There are 2 basic kinds of actions: cmd-action and python-action. See doit doc tell_why_am_i_running : if True (default), an additional why_am_i_running action is prepended to the list of actions file_dep : an optional list of strings or instances of any pathlib Path class indicating the files required for this task to run. When none of these files are modified, the task will be skipped if already run. See doit doc task_dep : an optional list of tasks (names or callables) that should be run before this task. Note that this is also a convenient way to create a group of tasks. See doit doc uptodate : an optional list where each element can be True (up to date), False (not up to date), None (ignored), a callable or a command(string). Many pre-baked callables from doit.tools can be used: result_dep to depend on the result of another task, run_once to run only once, timeout for time-based expiration, config_changed for changes in a \u201cconfiguration\u201d string or dictionary, and more... See doit doc targets : an optional list of strings or instances of any pathlib Path class indicating the files created by the task. They can be any file path (a file or folder). If a target does not exist the task will be executed. Two different tasks can not have the same target. See doit doc setup : tasks to be run before this task but only when it is run. See doit doc teardown : actions to run once all tasks are completed. See doit doc getargs : an optional dictionary where the key is the argument name used on actions, and the value is a tuple with 2 strings: task name, \u201cvalue name\u201d. getargs provides a way to use values computed from one task in another task. See doit doc calc_dep : See doit doc verbosity : an optional custom verbosity level (0, 1, or 2) for this task. See doit doc Note: this relies on the create_doit_tasks hook, see here @taskgen \u00b6 A decorator to create a task generator (See doit subtasks ). Similar to @task , you can use it without arguments and it will capture the name and docstring of the decorated function. This function needs to be a generator, meaning that it should yield tasks. Such tasks can be plain old dictionaries as in doit , or can be created with task . For example this is a task group named mygroup with two tasks mygroup:echo0 and mygroup:echo1 from doit_api import taskgen , task @taskgen def mygroup (): \"\"\" hey !!! \"\"\" for i in range ( 2 ): yield task ( name = \"echo %s \" % i , actions = [ \"echo hi > hoho %s .txt\" % i ], targets = [ \"hoho %s .txt\" % i ]) And this is one with two python subtasks: from doit_api import taskgen , task @taskgen def mygroup (): \"\"\" hey !!! \"\"\" for i in range ( 2 ): @task ( name = \"subtask %i \" % i , doc = \"a subtask %s \" % i , title = \"this is %s running\" % i ) def c_ (): print ( \"hello sub\" ) yield c_ @taskgen only accepts three optional arguments: name (that will be used for the base group name), doc , and title . Parameters: name : an alternate base name for the task group. By default the name of the decorated function is used. See doit doc doc : an optional documentation string for the task group. By default the decorated function docstring will be used. See doit doc title : an optional message string or callable generating a message, to print when this task group is run. If nothing is provided, by default the task name is printed. If a string is provided, the task name will automatically be printed before it. If a callable is provided it should receive a single task argument and return a string. See doit doc why_am_i_running \u00b6 Goodie: a python action that you can use in any doit task, to print the reason why the task is running if the task declared a file_dep , task_dep , uptodate or targets . Useful for debugging. See this doit conversation . title_with_actions \u00b6 Goodie: an automatic title for doit tasks. Same than doit.title_with_actions but removes why_am_i_running actions if any is present.","title":"API reference"},{"location":"api_reference/#api-reference","text":"In general, using help(symbol) is the recommended way to get the latest documentation. In addition, this page provides an overview of the various elements in this package.","title":"API reference"},{"location":"api_reference/#task-or-task","text":"Creates a doit task. It may be used as a decorator with or without parameter, or as a creator: from doit_api import task @task def a (): print ( \"hi\" ) @task ( targets =... , file_deps =... , ... ) def b (): print ( \"hi\" ) c = task ( actions = [ \"echo hi\" ]) It signature regroups all options that you usually can set on a doit task, with sensible defaults. A minimal doit task consists of one or several actions. When @task is used as a decorator, the main action is a call to the decorated function. Otherwise when task is used as a creator, you must provide at least one action in actions . You can specify actions to be done before and after that/these actions in pre_actions and post_actions . If tell_why_i_am_runnin=True (default) an additional action will be prepended to print the reason why the task is running if the task declared a file_dep , task_dep , uptodate or targets . All other parameters match those in doit conventions (See parameters below), except name that is an intelligent placeholder for basename (if a task is a simple task) or name (if the task is a subtask in a @taskgen generator), title that adds support for plain strings and by default is title_with_actions , task_dep , setup and calc_dep where if a task callable (decorated with @task or not) is provided, the corresponding name will be used. Note: the watch parameter (Linux and Mac only) is not yet supported. See [doit doc](https://pydoit.org/cmd_other.html?highlight=watch#auto-watch def task ( # -- task information name = None , # type: str doc = None , # type: str # -- what the task is doing when run title = title_with_actions , # type: Union[str, Callable] pre_actions = None , # type: List[DoitAction] actions = None , # type: List[DoitAction] post_actions = None , # type: List[DoitAction] tell_why_am_i_running = True , # type: bool # -- preventing useless runs and selecting order targets = None , # type: List[DoitPath] file_dep = None , # type: List[DoitPath] task_dep = None , # type: List[DoitTask] uptodate = None , # type: List[Optional[Union[bool, Callable, str]]] # -- advanced setup = None , # type: List[DoitTask] teardown = None , # type: List[DoitAction] getargs = None , # type: Dict[str, Tuple[str, str]] calc_dep = None , # type: List[DoitTask] # -- misc verbosity = None # type: int ) Parameters: name : an alternate name for the task. By default the name of the decorated function is used. Note that this parameter will intelligently set 'basename' for normal tasks or 'name' for subtasks in a task generator ( @taskgen ). See doit doc doc : an optional documentation string for the task. If @task is used as a decorator, the decorated function docstring will be used. See doit doc title : an optional message string or callable generating a message, to print when the task is run. If nothing is provided, by default the task name is printed. If a string is provided, the task name will automatically be printed before it. If a callable is provided it should receive a single task argument and return a string. See doit doc pre_actions : an optional list of actions to be executed before the main action(s). There are 2 basic kinds of actions: cmd-action and python-action. See doit doc actions : a list of actions that this task should execute. If task is used as a decorator, this attribute should not be set, as the action will be a call to the decorated function. There are 2 basic kinds of actions: cmd-action and python-action. See doit doc post_actions : an optional list of actions to be executed after the main action(s). There are 2 basic kinds of actions: cmd-action and python-action. See doit doc tell_why_am_i_running : if True (default), an additional why_am_i_running action is prepended to the list of actions file_dep : an optional list of strings or instances of any pathlib Path class indicating the files required for this task to run. When none of these files are modified, the task will be skipped if already run. See doit doc task_dep : an optional list of tasks (names or callables) that should be run before this task. Note that this is also a convenient way to create a group of tasks. See doit doc uptodate : an optional list where each element can be True (up to date), False (not up to date), None (ignored), a callable or a command(string). Many pre-baked callables from doit.tools can be used: result_dep to depend on the result of another task, run_once to run only once, timeout for time-based expiration, config_changed for changes in a \u201cconfiguration\u201d string or dictionary, and more... See doit doc targets : an optional list of strings or instances of any pathlib Path class indicating the files created by the task. They can be any file path (a file or folder). If a target does not exist the task will be executed. Two different tasks can not have the same target. See doit doc setup : tasks to be run before this task but only when it is run. See doit doc teardown : actions to run once all tasks are completed. See doit doc getargs : an optional dictionary where the key is the argument name used on actions, and the value is a tuple with 2 strings: task name, \u201cvalue name\u201d. getargs provides a way to use values computed from one task in another task. See doit doc calc_dep : See doit doc verbosity : an optional custom verbosity level (0, 1, or 2) for this task. See doit doc Note: this relies on the create_doit_tasks hook, see here","title":"@task or task"},{"location":"api_reference/#taskgen","text":"A decorator to create a task generator (See doit subtasks ). Similar to @task , you can use it without arguments and it will capture the name and docstring of the decorated function. This function needs to be a generator, meaning that it should yield tasks. Such tasks can be plain old dictionaries as in doit , or can be created with task . For example this is a task group named mygroup with two tasks mygroup:echo0 and mygroup:echo1 from doit_api import taskgen , task @taskgen def mygroup (): \"\"\" hey !!! \"\"\" for i in range ( 2 ): yield task ( name = \"echo %s \" % i , actions = [ \"echo hi > hoho %s .txt\" % i ], targets = [ \"hoho %s .txt\" % i ]) And this is one with two python subtasks: from doit_api import taskgen , task @taskgen def mygroup (): \"\"\" hey !!! \"\"\" for i in range ( 2 ): @task ( name = \"subtask %i \" % i , doc = \"a subtask %s \" % i , title = \"this is %s running\" % i ) def c_ (): print ( \"hello sub\" ) yield c_ @taskgen only accepts three optional arguments: name (that will be used for the base group name), doc , and title . Parameters: name : an alternate base name for the task group. By default the name of the decorated function is used. See doit doc doc : an optional documentation string for the task group. By default the decorated function docstring will be used. See doit doc title : an optional message string or callable generating a message, to print when this task group is run. If nothing is provided, by default the task name is printed. If a string is provided, the task name will automatically be printed before it. If a callable is provided it should receive a single task argument and return a string. See doit doc","title":"@taskgen"},{"location":"api_reference/#why_am_i_running","text":"Goodie: a python action that you can use in any doit task, to print the reason why the task is running if the task declared a file_dep , task_dep , uptodate or targets . Useful for debugging. See this doit conversation .","title":"why_am_i_running"},{"location":"api_reference/#title_with_actions","text":"Goodie: an automatic title for doit tasks. Same than doit.title_with_actions but removes why_am_i_running actions if any is present.","title":"title_with_actions"},{"location":"changelog/","text":"Changelog \u00b6 0.5.0 - First public version \u00b6 Initial release with task , taskgen , title_with_actions and why_am_i_running .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#050-first-public-version","text":"Initial release with task , taskgen , title_with_actions and why_am_i_running .","title":"0.5.0 - First public version"},{"location":"long_description/","text":"doit-api \u00b6 pydoit for humans: an API to create doit tasks faster and more reliably. The documentation for users is available here: https://smarie.github.io/python-doit-api/ A readme for developers is available here: https://github.com/smarie/python-doit-api","title":"doit-api"},{"location":"long_description/#doit-api","text":"pydoit for humans: an API to create doit tasks faster and more reliably. The documentation for users is available here: https://smarie.github.io/python-doit-api/ A readme for developers is available here: https://github.com/smarie/python-doit-api","title":"doit-api"}]}